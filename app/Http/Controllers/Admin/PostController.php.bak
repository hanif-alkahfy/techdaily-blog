<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Post;
use App\Models\Category;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class PostController extends Controller
{
    /**
     * Display a listing of posts
     */
    public function index(Request $request)
    {
        $query = Post::with(['user', 'category'])->latest();

        // Filter by status if provided
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }

        // Filter by category if provided
        if ($request->filled('category')) {
            $query->where('category_id', $request->category);
        }

        // Search functionality
        if ($request->filled('search')) {
            $searchTerm = $request->search;
            $query->where(function($q) use ($searchTerm) {
                $q->where('title', 'like', '%' . $searchTerm . '%')
                  ->orWhere('content', 'like', '%' . $searchTerm . '%')
                  ->orWhere('excerpt', 'like', '%' . $searchTerm . '%');
            });
        }

        // Handle per page option
        $perPage = $request->get('per_page', 10);
        $posts = $query->paginate($perPage);
        $categories = Category::all();

        return view('admin.posts.index', [
            'posts' => $posts,
            'categories' => $categories,
            'status' => $request->status,
            'selectedCategory' => $request->category
        ]);
    }

    /**
     * Show the form for creating a new post
     */
    public function create()
    {
        $categories = Category::all();
        return view('admin.posts.create', compact('categories'));
    }

    /**
     * Store a newly created post
     */
    public function store(Request $request)
    {
        try {
            $validated = $request->validate([
                'title' => 'required|max:255',
                'slug' => 'nullable|unique:posts',
                'excerpt' => 'nullable',
                'content' => 'required',
                'category_id' => 'required|exists:categories,id',
                'status' => 'required|in:draft,published'
            ]);

            DB::beginTransaction();

            // Generate unique slug if not provided
            if (empty($validated['slug'])) {
                $slug = Str::slug($validated['title']);
                $originalSlug = $slug;
                $count = 1;

                while (Post::where('slug', $slug)->exists()) {
                    $slug = $originalSlug . '-' . $count++;
                }
                $validated['slug'] = $slug;
            }

            $post = Post::create([
                ...$validated,
                'user_id' => Auth::id()
            ]);

            DB::commit();

            return redirect()->route('admin.posts.index')
                ->with('success', 'Post created successfully!');
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->withInput()
                ->with('error', 'Error creating post: ' . $e->getMessage());
        }
    }

    /**
     * Display the specified post
     */
    public function show(Post $post)
    {
        return view('admin.posts.show', compact('post'));
    }

    /**
     * Show the form for editing the specified post
     */
    public function edit(Post $post)
    {
        $categories = Category::all();
        return view('admin.posts.edit', compact('post', 'categories'));
    }

    /**
     * Update the specified post
     */
    public function update(Request $request, Post $post)
    {
        $validated = $request->validate([
            'title' => 'required|max:255',
            'slug' => 'nullable|unique:posts,slug,' . $post->id,
            'excerpt' => 'nullable',
            'content' => 'required',
            'category_id' => 'required|exists:categories,id',
            'status' => 'required|in:draft,published'
        ]);

        if (empty($validated['slug'])) {
            $validated['slug'] = Str::slug($validated['title']);
        }

        $post->update($validated);

        return redirect()->route('admin.posts.index')
            ->with('success', 'Post updated successfully!');
    }

    /**
     * Remove the specified post
     */
    public function destroy(Post $post)
    {
        try {
            DB::beginTransaction();
            $title = $post->title;
            $post->delete();
            DB::commit();

            return redirect()->route('admin.posts.index')
                ->with('success', "Post '{$title}' was deleted successfully.");
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Error deleting post: ' . $e->getMessage());
        }
    }

    /**
     * Handle bulk actions on posts
     */
    public function bulk(Request $request)
    {
        $validated = $request->validate([
            'posts' => 'required|array',
            'posts.*' => 'exists:posts,id',
            'action' => 'required|in:delete,publish,draft'
        ]);

        $posts = Post::whereIn('id', $validated['posts']);

        switch ($validated['action']) {
            case 'delete':
                $posts->delete();
                $message = 'Selected posts have been deleted';
                break;
            case 'publish':
                $posts->update(['status' => 'published']);
                $message = 'Selected posts have been published';
                break;
            case 'draft':
                $posts->update(['status' => 'draft']);
                $message = 'Selected posts have been moved to drafts';
                break;
        }

        return redirect()->route('admin.posts.index')
            ->with('success', $message);
    }
}
